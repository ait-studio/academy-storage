xPosition = 0
yPosition = 0

map = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
]

def turn_right():
    

def count_beepers():
    

### Here
while True:
    
    
    if xPosition < 8:
        
        
    elif yPosition < 8:
        
        
    else:
        break

for i in range(9):
    print(map[i])

turn_left()
repeat(move, 8)
turn_left()
repeat(move, 8)
repeat(turn_left, 2)
xPosition = 0
yPosition = 0


## Sudoku solver
def find_empty_cell(map):
    for row in range(9):
        for col in range(9):
            
            
            
    return None

def is_valid_number(map, row, col, num):
    if
        return False
    if
        return False
    
    row_origin, col_origin = 
    for i in range(
        for j in range(
            if map[i][j] == num:
                return 
    return True

def set_number(map, row, col, num):
    

def clear_number(map, row, col):
    

def solve_sudoku(map):
    empty_cell = 
    if not empty_cell:
        return 
    
    row, col = 
    for num in range(1, 10):
        print(row, col, num)
        if 
            
            if 
                return 
            
    return 

solve_sudoku(map)

for row in map:
    print(row)

while True:
    if on_beeper():
        if xPosition < 8:
            
            
        elif yPosition < 9:
            
            
        else:
            break
    else:
        repeat(put_beeper,
### End

turn_off()